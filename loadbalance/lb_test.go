package loadbalance

import (
	"fmt"
	"testing"

	"jingoal.com/dfs-client-golang/handler"
)

var (
	servers = []string{
		"192.168.0.1:10000",
		"192.168.0.2:10000",
		"192.168.0.3:10000",
		"192.168.0.4:10000",
		"192.168.0.5:10000",
		"192.168.0.6:10000",
		"192.168.0.7:10000",
		"192.168.0.8:10000",
		"192.168.0.9:10000",
		"192.168.0.10:10000",
		"192.168.0.11:10000",
		"192.168.0.12:10000",
		"192.168.0.13:10000",
		"192.168.0.14:10000",
		"192.168.0.15:10000",
		"192.168.0.16:10000",
		"192.168.0.17:10000",
		"192.168.0.18:10000",
		"192.168.0.19:10000",
		"192.168.0.20:10000",
		"192.168.0.21:10000",
		"192.168.0.22:10000",
		"192.168.0.23:10000",
		"192.168.0.24:10000",
		"192.168.0.25:10000",
		"192.168.0.26:10000",
		"192.168.0.27:10000",
		"192.168.0.28:10000",
		"192.168.0.29:10000",
		"192.168.0.30:10000",
	}

	servers2 = []string{
		"192.168.0.1:10000",
		"192.168.0.2:10000",
		"192.168.0.3:10000",
		"192.168.0.4:10000",
		"192.168.0.5:10000",
		"192.168.0.6:10000",
		"192.168.0.7:10000",
		"192.168.0.8:10000",
		"192.168.0.9:10000",
		"192.168.0.10:10000",
		"192.168.0.11:10000",
		"192.168.0.12:10000",
		"192.168.0.13:10000",
		"192.168.0.14:10000",
		"192.168.0.15:10000",
		"192.168.0.16:10000",
		"192.168.0.17:10000",
		"192.168.0.18:10000",
		"192.168.0.19:10000",
		"192.168.0.20:10000",
		"192.168.0.21:10000",
		"192.168.0.22:10000",
		"192.168.0.23:10000",
		"192.168.0.24:10000",
		"192.168.0.25:10000",
		"192.168.0.26:10000",
		"192.168.0.27:10000",
		"192.168.0.28:10000",
		"192.168.0.29:10000",
		"192.168.0.40:10000",
	}
)

func TestGetPerfectHandler(t *testing.T) {
	lb, _ := NewLb(servers, "unit-test-node", false)
	lb.update(getMap(servers))
	for i := 1; i <= 100; i++ {
		fmt.Printf("getPerfectHandler %d %v\n", i, lb.getPerfectHandler(int64(i)))
	}

	lb.update(getMap(servers2))
	for i := 1; i <= 100; i++ {
		fmt.Printf("getPerfectHandler %d %v\n", i, lb.getPerfectHandler(int64(i)))
	}

}

func TestGetNext(t *testing.T) {
	lb, _ := NewLb(servers, "unit-test-node", false)
	for i := 0; i < len(servers); i++ {
		fmt.Printf("getNext: %v\n", lb.getNext())
	}
}

func getMap(ks []string) (result map[string]*handler.ClientHandler) {
	result = make(map[string]*handler.ClientHandler)

	for _, k := range ks {
		result[k] = handler.NewClientHandler(k, "", false)
	}

	return
}
